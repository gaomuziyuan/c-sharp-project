// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Mohammad_Servicing.Entities;

#nullable disable

namespace Mohammad_Servicing.DAL
{
    public partial class EbikeServicingContext : DbContext
    {
        public EbikeServicingContext()
        {
        }

        public EbikeServicingContext(DbContextOptions<EbikeServicingContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Coupon> Coupons { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerVehicle> CustomerVehicles { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobDetail> JobDetails { get; set; }
        public virtual DbSet<JobDetailPart> JobDetailParts { get; set; }
        public virtual DbSet<Part> Parts { get; set; }
        public virtual DbSet<StandardJob> StandardJobs { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=eBike_DMIT2018;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.ContactPhone)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EmailAddress).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Province)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CustomerVehicle>(entity =>
            {
                entity.HasKey(e => e.VehicleIdentification)
                    .HasName("PK_CustomerVehicles_VehicleIdentification");

                entity.Property(e => e.VehicleIdentification).IsFixedLength(true);

                entity.Property(e => e.Make).IsFixedLength(true);

                entity.Property(e => e.Model).IsFixedLength(true);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerVehicles)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerVehiclesCustomers_CustomerID");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.ContactPhone).IsUnicode(false);

                entity.Property(e => e.EmailAddress).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Province)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SocialInsuranceNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.Property(e => e.VehicleIdentification).IsFixedLength(true);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Jobs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobsEmployees_EmployeeID");

                entity.HasOne(d => d.VehicleIdentificationNavigation)
                    .WithMany(p => p.Jobs)
                    .HasForeignKey(d => d.VehicleIdentification)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobsCustomerVehicles_VehicleIdentification");
            });

            modelBuilder.Entity<JobDetail>(entity =>
            {
                entity.Property(e => e.StatusCode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('I')")
                    .IsFixedLength(true);

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.JobDetails)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK_JobDetailsCoupons_CouponID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.JobDetails)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_JobDetailsEmployees_EmployeeID");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.JobDetails)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobDetailsJobs_JobID");
            });

            modelBuilder.Entity<JobDetailPart>(entity =>
            {
                entity.HasOne(d => d.JobDetail)
                    .WithMany(p => p.JobDetailParts)
                    .HasForeignKey(d => d.JobDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobDetailPartsJobDetails_JobDetailID");

                entity.HasOne(d => d.Part)
                    .WithMany(p => p.JobDetailParts)
                    .HasForeignKey(d => d.PartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobDetailPartsParts_PartID");
            });

            modelBuilder.Entity<Part>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Refundable)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Parts)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartsCategories_CategoryID");
            });

            modelBuilder.Entity<StandardJob>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}